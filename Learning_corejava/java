java program structure : 

1 : package : grop of classes

2 : import : while using library class/iterface

3 : class name : userdefine class

4 : main method : 

shortcut : 
praposals : ctrl + space
newfile : ctrl + N
zoomin : ctrl + +
zoomout : ctrl + -
save : ctrl +s
run code : F11
delete line L ctrl + d
signle line comment : select : ctrl + /



Naming convantion : 

package : should be small letter
class : should start with Capital letter, if there are multiple words thern every word should start with capital


variables : 

Naming rules : 

1 : A variable name can consist of Capital letters A-Z, lowercase letters a-z digits 0-9, and two special characters such as _ underscore and $ dollar sign.
2 : The first character must not be a digit.
3 : Blank spaces cannot be used in variable names.
4 : Java keywords cannot be used as variable names.
5 : Variable names are case-sensitive.
6 : There is no limit on the length of a variable name but by convention, it should be between 4 to 15 chars.
7 : Variable names always should exist on the left-hand side of assignment operators.

Naming Covention : 
1 : name sholud be in small letters, if there are multiple words then all other words after first word should start with capital letter.


8 bit = 1 byte
1024 byte = 1 kb
1024 kb = 1 mb
1024 mb = 1 gb
1024 gb = 1 tb


Datatypes : 
byte    1 byte	0   :  2^7 - 1   to -2^7  : 127 to -128
short	2 byte	0   :  2^15 -1 to -2^15 : 32767 to 32768
int		4 byte	0
long	8 byte	0

float   4 byte	0.0
double	8 byte	0.0

char	2 byte	
boolean	1bit	false

datatype Casting : 
convert one type of data into another type

*************************************************
Oprators : 
Arithmatic oprator : 
+,-,*,/,%

Relational : 
<,>,<=,>=, !=,==

Logical : 
OR ||, AND && , NOT !

unary : 
++,--

Turnary : 
condition ? true : flase

**************************************************
Statements : 

conditional : 
if, if-else, switch-case


looping
for, while, do-while

task : 

marks : 70

91-100 : grade A
71-90 : grade B
51-70 : grade C
36-50 : grade D
0-35 : Fail
other then 0-100 : invalid input


Basic practice : 
1 : odd and even no.
2 : prime
 
 task : find 11-50 prime not
 
3 : Factorial
4 : Fibbonacci series



******************************************************
Array : 
collection of same type of data

1dimention
Mdimention

array index stats from 0.


OOPs : 
******************
class
object
encaptulation
polymorphism
inheritance
abstraction

class
logical entity

object
realtime entity


state/ variables
behaviour /methods

can be 2 types : 
static : single copy / can be called by class name 
non-static : depends on object creation / need to create abject to call method



method syntax : reusable code

accessmodifier(optional) returntype(*) methodname(args)
{
	//body
}

object syntex :

classname variablename = new classConstructor();
Pen p = new Pen();


Accessmodifier
public : can be accesible from anywhere
private : accesible in class only
protected : accesible i packge and outside the package in subclass only
default : can be accesible in packege only

Encaptulation
wrapping data member and function member in single unit and give apropriate access to use it and secure it

Inheritance
create new class using onther class property

base / super / perent : 
from which property inherited

derived / sub / child : 
new class created using another class proprty


keywords : 
static : create signle copy in memory
this : refer current class member
super : refer super / perent class member


type of inheritance : 

A --> B : simple inheritance

A-->B-->C : multilevel inheritance

A-->B
A-->C : hirichical inheritance


A,B-->C : multiple inheritancd
not supported in java

Polymorphism : 
one name , many forms

compiletime / methodoverloading
same class
by changing parameters, by type or by length

runtime / methodoverriding
super - > sub class
by changing method body

Abstraction : 
hiding implimetation and showing only functionality

how can we achieve abstraction in java : 
abstract class - partail abstraction - contains abstract and instance method both
interface - 100% abstraction - contains abstract method only

abstract method : 
method without body

public void display(); -- 


instance method : 
public void sample()
{

}

///final : 
class : cant inherite
method : cant override
variable : cant change


//imp classes
String
Stringbuffer
Stringbuilder
Object
Wrapper

Exception handling : 

error : 
exception : abnormal conditions accures during execution of program

types of exception

compiletime
runtime


FILE IO : input/output

stream : flow of data

byte based
FileInputStream
FileOutputStream

char. based
FileReader
FileWriter

File class


Thread : 

light wait process.
multiple thread can run concureentlly.

how to create thread

Using 
Thread Class
Runnable interface


Collection Framework : 

interface : 

list
set
queue

list : 
arraylist : preserving insertion order, duplication allowed



set : duplication not allowed
hashset : does not preserve insertion order
linkedhashset : preserving insertion order
treeset : asc or desc order

Map
*****************************java end***********************
































































